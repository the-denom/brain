// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	authtypes "github.com/cosmos/cosmos-sdk/x/auth/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// AccountKeeper is an autogenerated mock type for the AccountKeeper type
type AccountKeeper struct {
	mock.Mock
}

// GetAccount provides a mock function with given fields: ctx, addr
func (_m *AccountKeeper) GetAccount(ctx types.Context, addr types.AccAddress) authtypes.AccountI {
	ret := _m.Called(ctx, addr)

	var r0 authtypes.AccountI
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) authtypes.AccountI); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authtypes.AccountI)
		}
	}

	return r0
}

// HasAccount provides a mock function with given fields: _a0, _a1
func (_m *AccountKeeper) HasAccount(_a0 types.Context, _a1 types.AccAddress) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewAccountWithAddress provides a mock function with given fields: _a0, _a1
func (_m *AccountKeeper) NewAccountWithAddress(_a0 types.Context, _a1 types.AccAddress) authtypes.AccountI {
	ret := _m.Called(_a0, _a1)

	var r0 authtypes.AccountI
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) authtypes.AccountI); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authtypes.AccountI)
		}
	}

	return r0
}

// SetAccount provides a mock function with given fields: _a0, _a1
func (_m *AccountKeeper) SetAccount(_a0 types.Context, _a1 authtypes.AccountI) {
	_m.Called(_a0, _a1)
}

type mockConstructorTestingTNewAccountKeeper interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountKeeper creates a new instance of AccountKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountKeeper(t mockConstructorTestingTNewAccountKeeper) *AccountKeeper {
	mock := &AccountKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
