// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	membershiptypes "github.com/cdbo/brain/x/membership/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// KeeperI is an autogenerated mock type for the KeeperI type
type KeeperI struct {
	mock.Mock
}

// AppendMember provides a mock function with given fields: ctx, address, newMember
func (_m *KeeperI) AppendMember(ctx types.Context, address types.AccAddress, newMember membershiptypes.Member) {
	_m.Called(ctx, address, newMember)
}

// GetMember provides a mock function with given fields: ctx, address
func (_m *KeeperI) GetMember(ctx types.Context, address types.AccAddress) (membershiptypes.Member, bool) {
	ret := _m.Called(ctx, address)

	var r0 membershiptypes.Member
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) (membershiptypes.Member, bool)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) membershiptypes.Member); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(membershiptypes.Member)
	}

	if rf, ok := ret.Get(1).(func(types.Context, types.AccAddress) bool); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetMemberCount provides a mock function with given fields: ctx
func (_m *KeeperI) GetMemberCount(ctx types.Context) uint64 {
	ret := _m.Called(ctx)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(types.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// IsMember provides a mock function with given fields: ctx, address
func (_m *KeeperI) IsMember(ctx types.Context, address types.AccAddress) bool {
	ret := _m.Called(ctx, address)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) bool); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetMemberCount provides a mock function with given fields: ctx, count
func (_m *KeeperI) SetMemberCount(ctx types.Context, count uint64) {
	_m.Called(ctx, count)
}

// UpdateMemberStatus provides a mock function with given fields: ctx, target, s
func (_m *KeeperI) UpdateMemberStatus(ctx types.Context, target types.AccAddress, s membershiptypes.MembershipStatus) error {
	ret := _m.Called(ctx, target, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress, membershiptypes.MembershipStatus) error); ok {
		r0 = rf(ctx, target, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewKeeperI interface {
	mock.TestingT
	Cleanup(func())
}

// NewKeeperI creates a new instance of KeeperI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKeeperI(t mockConstructorTestingTNewKeeperI) *KeeperI {
	mock := &KeeperI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
